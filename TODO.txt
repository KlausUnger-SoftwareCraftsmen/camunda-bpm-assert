(rafa) We need to clarify and support the different ways to start a process instance:
runtimeService.startProcessInstanceById()
runtimeService.startProcessInstanceByKey();
runtimeService.startProcessInstanceByMessage()


(rafa) When working with this code

public class TaskDueDateExtensionsTest extends FluentProcessEngineTestCase {

  @Deployment
  public void testDueDateExtension() throws Exception {

    Date date = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss").parse("06-07-1986 12:10:00");

    FluentProcessInstance pi = newProcessInstance("dueDateExtension")
            .withVariable("dateVariable", date)
            .start();

    ProcessInstance processInstance = pi.getDelegate();
    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();

    assertNotNull(task.getDueDate());
    assertEquals(date, task.getDueDate());
  }

It would be good to have a better name for pi.getDelegate() like pi.getProcessInstance().
We need to make the decision on whether to check whether the process instance has actually been started and throw an exception otherwise.

CONCLUSION: you should never need to use the delegate. Exposed for transparency reasons.

(rafa) Currently, FluentLookups and FluentProcessInstanceLookup are exposed to tests. I believe we should hide these lookup classes by exposing them only on a package level.

CONCLUSION: to be done once the code settles down. Check Spring, Hibernate projects of how they do it.
How do they implement their entry points.

(rafa) Code-assist does not currently work for newProcessInstance, it will resolve to:

    FluentProcessInstanceLookup.newProcessInstance()

which is an internal lookup method.

CONCLUSION: to be done when the structure settles down.

(rafa) Give a better error when someone forgets to start a process:

  private void testPriorityExtension(int priority) throws Exception {
    // Start process-instance, passing priority that should be used as task priority
    newProcessInstance("taskPriorityExtension").withVariable("taskPriority", priority);
    assertThat(processTask().getPriority()).isEqualTo(priority);
  }

gives the error:

java.lang.AssertionError: [By calling processTask() you implicitly assumed that exactly one such object exists.] expected size:<1> but was:<0> in:<[]>
	at com.plexiti.activiti.test.fluent.engine.FluentProcessInstanceImpl.task(FluentProcessInstanceImpl.java:86)
	at com.plexiti.activiti.test.fluent.FluentProcessEngineTests.processTask(FluentProcessEngineTests.java:56)
	at org.camunda.bpm.engine.test.bpmn.usertask.TaskPriorityExtensionsTest.testPriorityExtension(TaskPriorityExtensionsTest.java:40)
	at org.camunda.bpm.engine.test.bpmn.usertask.TaskPriorityExtensionsTest.testPriorityExtension(TaskPriorityExtensionsTest.java:32)
    ...

We could give a more descriptive error like:

The process instance has not been started.

(rafa) See branch feature-unsupported-newprocessinstance-usage and comments in the test


